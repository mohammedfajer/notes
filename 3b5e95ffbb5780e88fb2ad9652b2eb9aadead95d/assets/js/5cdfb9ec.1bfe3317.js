"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[6050],{330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(4848),i=t(8453);const r={},o="Task Sheet 2 - Introduction to Unity Programming",a={id:"GAP5005 Games Hardware Development/tutorial-unity/week1/ws2",title:"Task Sheet 2 - Introduction to Unity Programming",description:"Create a new Unity project in the Temp folder found on the C:drive ; make sure you copy it to an external drive at the end of the session (2D or 3D project; it doesn't matter).",source:"@site/docs/GAP5005 Games Hardware Development/tutorial-unity/week1/ws2.mdx",sourceDirName:"GAP5005 Games Hardware Development/tutorial-unity/week1",slug:"/GAP5005 Games Hardware Development/tutorial-unity/week1/ws2",permalink:"/notes/3b5e95ffbb5780e88fb2ad9652b2eb9aadead95d/docs/GAP5005 Games Hardware Development/tutorial-unity/week1/ws2",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Task Sheet 1 - Introduction to Unity",permalink:"/notes/3b5e95ffbb5780e88fb2ad9652b2eb9aadead95d/docs/GAP5005 Games Hardware Development/tutorial-unity/week1/ws1"},next:{title:"Week 2 - Creating Unity Gameplay Mechanics in C#",permalink:"/notes/3b5e95ffbb5780e88fb2ad9652b2eb9aadead95d/docs/category/week-2---creating-unity-gameplay-mechanics-in-c"}},d={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Task 1: Coding the Jetpack",id:"task-1-coding-the-jetpack",level:2},{value:"Task 2: Coding Player Behaviour",id:"task-2-coding-player-behaviour",level:2},{value:"Task 3: Coding the Shooting",id:"task-3-coding-the-shooting",level:2},{value:"Task 4: Commenting / Formatting",id:"task-4-commenting--formatting",level:2},{value:"Bonus Task: Setting Default Speed and Bullets in Editor",id:"bonus-task-setting-default-speed-and-bullets-in-editor",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"task-sheet-2---introduction-to-unity-programming",children:"Task Sheet 2 - Introduction to Unity Programming"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a new Unity project in the Temp folder found on the C",":drive"," ; make sure you copy it to an external drive at the end of the session (2D or 3D project; it doesn't matter)."]}),"\n",(0,s.jsxs)(n.p,{children:["Open up your newly created project and create an empty ",(0,s.jsx)(n.strong,{children:"GameObject"})," and change its position in the ",(0,s.jsx)("u",{children:"Inspector Panel "})," tp equal ",(0,s.jsx)(n.code,{children:"(0,0,0)"}),". Rename your new object to ",(0,s.jsx)(n.strong,{children:"Player"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.p,{children:["Create a new folder in your ",(0,s.jsx)("u",{children:"Project Panel"})," called ",(0,s.jsx)(n.strong,{children:"Scripts"}),". Inside that folder, create a new ",(0,s.jsx)(n.code,{children:"C#"})," script called ",(0,s.jsx)(n.strong,{children:"PlayerBehaviour"}),". Add the script as a component to your ",(0,s.jsx)(n.strong,{children:"Player"})," object."]}),"\n",(0,s.jsx)(n.p,{children:"Below is a table of important information which we will use to create variables in this tasksheet."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Variable"}),(0,s.jsx)(n.th,{children:"d Value"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Run Speed"}),(0,s.jsx)(n.td,{children:"10.0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Jump Height"}),(0,s.jsx)(n.td,{children:"3.0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Bullets"}),(0,s.jsx)(n.td,{children:"10"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Jetpack"}),(0,s.jsx)(n.td,{children:"False"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Open up  your ",(0,s.jsx)(n.strong,{children:"PlayerBehaviour"})," script by double clicking it. Just above the ",(0,s.jsx)(n.code,{children:"Start function"}),", declare the above four variables by using a suitable ",(0,s.jsx)(n.strong,{children:"type"})," for each; here's what the first one would look like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerBehaviour : MonoBehaviour\n{\n    public float runSpeed;\n\n    // continue here ...\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        runSpeed = = 10.0f;\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        \n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Once you have declared the four variables, make sure the variables equal to the default values (seen in the above table) in the ",(0,s.jsx)(n.code,{children:"Start"})," function."]}),"\n",(0,s.jsx)(n.h2,{id:"task-1-coding-the-jetpack",children:"Task 1: Coding the Jetpack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"a)"})," Create a new function inside your script which handles the Jetpack; name the function something suitable, but remember, your function cannot have the same name as your script or other variables/functions - it needs to be unique. Inside the function, create a conditional check which checks to see if the space bar is being held down continuously."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"b)"})," Inside your ",(0,s.jsx)(n.code,{children:"if-statement"})," which checks to see if space is being held, set the Jetpack variable to equal true."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"c)"})," Create another conditional check inside your function which checks to see if the space bar has been lifted up, and inside that set the jetpack variable to false. You may wish to use an ",(0,s.jsx)(n.strong,{children:"else"})," statement."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"d)"})," Inside the same function, at the bottom, enter a ",(0,s.jsx)(n.code,{children:"Debug.Log(...)"})," message which prints the following:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)("div",{children:[(0,s.jsxs)(n.p,{children:["The jetpack is enabled ="," "]}),(0,s.jsx)("span",{style:{color:"red"},children:(0,s.jsx)(n.p,{children:"'Jetpack Variable Value'"})})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"e)"})," Once that has been done, make sure you call your function in a suitable place (either the Start function, or Update() - you decide which is the correct one)."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Go ahead and play your game. If you have done everything correctly then your ",(0,s.jsx)("u",{children:"Console Panel"})," should print the following when the space bar is held:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"The jetpack is enabled = true"})}),"\n",(0,s.jsx)(n.p,{children:"And print the following when you lift the space bar key up:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"The jetpack is enable = false"})}),"\n",(0,s.jsxs)(n.p,{children:["If your console is not present, you can find it by navigating to: ",(0,s.jsx)(n.strong,{children:"Window > General > Console"})]}),"\n",(0,s.jsx)(n.h2,{id:"task-2-coding-player-behaviour",children:"Task 2: Coding Player Behaviour"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"a)"})," Create another function in the same script which handles the player behaviour; give it a suitable name. Inside the function, add a statement which checks to see if the ",(0,s.jsx)(n.code,{children:"W"})," key is being held down continuously. Make sure you call this function in a suitable place (",(0,s.jsx)(n.code,{children:"Start"})," or ",(0,s.jsx)(n.code,{children:"Update"}),", you decide)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"b)"})," Inside your if statement, add 2 to your ",(0,s.jsx)(n.code,{children:"runSpeed"})," value. You will want to add ",(0,s.jsx)(n.code,{children:"2"})," per second; to achieve this, add 2 to your ",(0,s.jsx)(n.code,{children:"runSpeed"})," variable and then multiply it by ",(0,s.jsx)(n.code,{children:"Time.deltaTime"}),". Without multiplying by ",(0,s.jsx)(n.code,{children:"Time.deltaTime"}),", 2 would be added each frame instead of per second."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"c)"})," Add another check inside this statement which makes sure that the ",(0,s.jsx)(n.code,{children:"2"})," cannot be added if the ",(0,s.jsx)(n.code,{children:"runSpeed"})," variable is more than 20. ",(0,s.jsx)(n.code,{children:"Hint"}),": You need to use ",(0,s.jsx)(n.code,{children:"&&"})," in your if statement which is checking to see if the ",(0,s.jsx)(n.code,{children:"W"})," key is being held, or you can nest another if statement."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"d)"})," Add another check inside this function which checks to see if the ",(0,s.jsx)(n.code,{children:"W"})," key has been lifted up, and if it has, set the ",(0,s.jsx)(n.code,{children:"runSpeed"})," variable to equal 10 (the default value)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"e)"})," In a suitable place inside the function, print a ",(0,s.jsx)(n.code,{children:"Debug.Log(...)"})," message which prints the following:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)("div",{children:[(0,s.jsxs)(n.p,{children:["The player's run speed is ="," "]}),(0,s.jsx)("span",{style:{color:"red"},children:(0,s.jsx)(n.p,{children:"'runSpeed'"})})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"f)"})," In the same function, create another statement which checks to see if the ",(0,s.jsx)(n.code,{children:"J"})," button has been pressed once. Inside that check, simply print a ",(0,s.jsx)(n.code,{children:"Debug.Log(...)"})," message which prints:"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"The player has jumped"})}),"\n",(0,s.jsxs)(n.p,{children:["Go ahead and play your game. If you have done everything correctly then you ",(0,s.jsx)("u",{children:"Console Panel"})," should be constantly printing the ",(0,s.jsx)(n.code,{children:"runSpeed"}),", and it should increment when you hold the ",(0,s.jsx)(n.code,{children:"W"})," key. When you release the ",(0,s.jsx)(n.code,{children:"W"})," key, the ",(0,s.jsx)(n.code,{children:"runSpeed"})," variable should reset to 10."]}),"\n",(0,s.jsxs)(n.p,{children:["When you press the ",(0,s.jsx)(n.code,{children:"J"})," key, a single ",(0,s.jsx)(n.code,{children:"Debug.Log(...)"})," message should print: ",(0,s.jsx)(n.code,{children:"Player has jumped"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"task-3-coding-the-shooting",children:"Task 3: Coding the Shooting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"a)"})," Create a new function which handles the shooting; give it a suitable name, and make sure it's being called in a suitable place."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"b)"})," Inside the function add a condition which checks to see if the left mouse button has been pressed once."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"c)"})," Inside that statement, deduct 1 fro the bullets variable, and add a ",(0,s.jsx)(n.code,{children:"Debug.Log(...)"})," message which prints the bullets variable to the ",(0,s.jsx)("u",{children:"Console Panel"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"d)"})," Add a check to make sure bullets cannot go below 0."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"e)"})," Inside the same function, create another check which checks to see if the ",(0,s.jsx)(n.code,{children:"R"})," key has been pressed, and if bullets is equal to 0. If both conditions are met, se the bullets variable to 10. Underneath the line which sets the bullets variable back to 10, print a ",(0,s.jsx)(n.code,{children:"Debug.Log(...)"})," message which states ",(0,s.jsx)(n.code,{children:"Reloading gun, 10 rounds added"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Go ahead and play your game. If you have done everything correctly then you ",(0,s.jsx)("u",{children:"Console Panel"})," should print your bullets variable when you press the left mouse button."]}),"\n",(0,s.jsx)(n.h2,{id:"task-4-commenting--formatting",children:"Task 4: Commenting / Formatting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"a)"})," When programming, it is good practice to have a script be responsible for a single feature. For example, you would not typically create a large script for player behaviour like we have done here. In your professional careers, you will be asked to ",(0,s.jsx)(n.code,{children:"refactor"})," code, and a common task is to decompose bigger scripts into smaller ones. As such, split your ",(0,s.jsx)(n.strong,{children:"PlayerBehaviour"})," class up into multiple different scripts; one for shooting, one for the jetpack, and one for player movement."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"b)"})," Comment your code accordingly."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"c)"})," Format  your code accordingly."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"bonus-task-setting-default-speed-and-bullets-in-editor",children:"Bonus Task: Setting Default Speed and Bullets in Editor"}),"\n",(0,s.jsx)(n.p,{children:"If you have checked the property panel at any point after declaring your variables, and used the public keyword as indicated, you will notice the variables you created are visible and can be modified in the editor. However, when you run with these modifications, what do you notice? Those values aren\u2019t being used. The speed is still 10.0 and you have 10 bullets."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"a)"})," Try to make the code keep the values set from the editor when you run the game, so move speed reads 50, and your bullet count starts at 100. Do not hard set those values in code, they must come from the editor. ",(0,s.jsx)(n.strong,{children:"Hint:"})," The problem is in the Start function."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"b)"})," Once the editor variable are being used, you will notice that if you press and release W, it will go back to 10. Similarly, pressing R to reload will add 10 rounds to the gun.\nMake any necessary changes to now reset the default speed to that editor value of 50 and make reload add 100 rounds. Again, do not hard code these values \u2013 they should match whatever value is set in the editor. Hint: You will need to add new variables to the code"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);